{"pages":[],"posts":[{"title":"Hello World7","text":"","link":"/2020/05/23/2020-05-23/"},{"title":"10分钟入门Shell脚本编程","text":"前言写下这篇文章，是对自己在学习和使用过程中的总结，文笔不是很好，如果有什么问题欢迎沟通交流 Github地址：https://github.com/hi-dhl/fast_guides Shell是什么Shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务, Shell脚本（shell script），是一种为Shell编写的脚本程序。我们经常说的shell通常都是指shell脚本。 环境和工具Shell跟java、php、Python编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。 Mac OS，Linux 自带了shell解释器，Windows比较麻烦，因为Win7专业版和旗舰版默认安装PowerShell，标准版和家庭版中就没有安装的，为了方便建议安装cygwin PHP、Python 也可以作为Shell编程PHP、Python是属于高级编程语言，但是也可以做Shell编程，因为只要有解释器，也可以用作脚本编程 如下是一个Python Shell Script示例（假设文件名叫op_python_base.py）： #!/usr/bin/env python3 //告诉Python从系统环境中找python# -*- coding: utf-8 -*- //设置为UTF-8编码for index in range(10): print(index); 源码：op_python_base 如下是一个PHP Shell Script示例（假设文件名叫op_php_base.php）： #!/usr/bin/php&lt;?phpfor($i=0 ;$i&lt;10; $i++){ echo $i;}?&gt; 源码：op_php_base 为什么要学习Shell既然PHP、Python都可以用来写脚本编程，那为什么还要学习陌生、晦涩难懂的Shell，主要有一下几个原因 环境兼容性，Win7专业版和旗舰版默认安装PowerShell，标准版和家庭版中就没有安装的，其他主流的操作系统都预制了Shell解释器，所以使用sh、bash编写，提供给其他人使用是非常方便的，但是PHP、Python 等等需要安装相应的环境 如果你想做一些定时任务比如说检测进程是否存在，自动备份，或者说自动部署环境、服务器之间的数据同步等等sh、bash会是你最好的选择 sh与bashsh: Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh bash: Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash 第一个shell脚本我们先来看一个例子我相信写过代码的童鞋，应该对下面的代码很熟悉并不陌生，（假设文件名叫op_base.sh）： #!/usr/bin/env bashmkdir codecd codefor ((i=0; i&lt;3; i++)); do touch test_${i}.txt echo &quot;shell很简单&quot; &gt;&gt; test_${i}.txtdone 第一行：从系统path中寻找指定脚本的解释程序第二行：创建 名叫code文件夹第三行：进入创建的文件夹第四行：for循环3次第四行：创建文件第五行：往创建的文件中写入信息第六行：结束循环 mkdir, touch，cd，touch，echo都是系统命令，在命令行下可以直接执行for, do, done 是shell脚本语言 for循环的语法 源码：op_base.sh 编写Shell新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php，扩展名为php，如果你用Python，扩展名为python 第一行一般是这样： #!/usr/bin/php#!/usr/bin/env python3#!/usr/bin/env bash #!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行 /env 是系统的PATH目录中查找 运行 Shell 脚本有两种方法：作为可执行程序chmod +x op_base.sh./op_base.sh 第一行设置 op_base.sh可执行权限第二行执行op_base.sh 作为参数/bin/sh op_base.sh 变量定义变量时，变量名前不需要加符号和Python一样但是在PHP语言中变量需要加$，如： my_name=&quot;jack&quot;my_name='jack'; ps: 变量名和等号之间不能有空格,变量后面不能有; Shell中的引号和PHP类似，字符串可以用单引号，也可以用双引号 单引号字符串的限制： 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的 单引号字串中不能出现单引号（对单引号使用转义符后也不行 双引号： 双引号里可以有变量 双引号里可以出现转义字符 但是在Python中单引号和双引号是没有区别，但是Python 还有三个引号，在三个引号内字符都不会被转义 使用变量对于已经定义过的变量，使用的适合在前面添加$ echo $my_nameecho ${my_name} 变量名外面的花括号是可选的，加不加都行,建议使用第二种形式 注释以“#”开头的行就是注释，会被解释器忽略。 多行注释sh里没有多行注释，只能每一行加一个#号。就像这样： #--------------------------------------------# Author: jack ## Notes: 10分钟入门Shell脚本编程## Project home page:# https://github.com/hi-dhl/fast_guides#-------------------------------------------- 字符串字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似 Shell不像其他语言有php、python 有很多数据类型，在Shell中常用的数据类型字符串数字和字符串（ps: 除了数字和字符串，也没啥其它类型好用了，哈哈） 单引号字符串的限制： 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的 单引号字串中不能出现单引号（对单引号使用转义符后也不行 双引号： 双引号里可以有变量 双引号里可以出现转义字符 字符串操作拼接字符串my_name=&quot;jack&quot;;my_age=&quot;20岁&quot;echo $my_name $my_ageecho $my_name$my_age 获取字符串长度echo ${#my_name} 截取字符串echo ${my_name:0:2} 源码：op_str.sh Shell 数组定义数组在Shell中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为： name=(name1 name2 name3) 还可以单独定义数组的各个分量： ary[0]=name1ary[1]=name2ary[3]=name3 ps: 可以不使用连续的下标，而且下标的范围没有限制 读取数组读取数组元素值的一般格式是： ${数组名[下标]} 例如： echo ${name[0]} 使用@符号可以获取数组中的所有元素，例如： echo ${name[@]} 获取数组的长度获取数组长度的方法与获取字符串长度的方法相同，例如： # 取得数组元素的个数length=${#name[@]}echo $length# 或者length=${#name[*]}echo $length# 取得数组单个元素的长度lengthn=${#name[n]}echo $length 源码：op_arry.sh Shell 流程控制和Java、PHP、Python等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)： &lt;?phpif (isset($_GET[&quot;q&quot;])) { search(q);}else { // 不做任何事情} 在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else ifif condition1then command1elif condition2 then command2else commandNfi 例子： #!/usr/bin/env basha=1b=2if [ $a == $b ] then echo &quot;a 等于 b&quot; elif [ $a -gt $b ] then echo &quot;a 大于 b&quot; elif [ $a -lt $b ] then echo &quot;a 小于 b&quot; else echo &quot;没有符合的条件&quot; fi 源码：op_if.sh for 循环Shell的for循环和Python 有点类似 Python的for循环for index in 1,2,3,4,5: print(index); Shell的for循环，第一种写法for index in 1 2 3 4 5; do echo &quot;index=&quot;$indexdone Shell的for循环，第二种写法for ((i=0; i&lt;5; i++)); do echo &quot;i=&quot;$idone 源码：op_for.sh while 语句while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。 int=1while(( $int&lt;=5 ))do echo $int let &quot;int++&quot;done 源码：op_while.sh Shell结合系统命令sh脚本结合系统命令便有了强大的威力，在字符处理领域，有grep、awk、sed三剑客，grep负责找出特定的行，awk能将行拆分成多个字段，sed则可以实现更新插入删除等写操作。 例如定时检测nginx、mysql是否被关闭path=/var/loglog=${path}/httpd-mysql.logname=(apache mysql)exs_init[0]=&quot;service httpd start&quot;exs_init[1]=&quot;/etc/init.d/mysqld restart&quot;for ((i=0; i&lt;2; i++)); do echo &quot;检查${name[i]}进程是否存在&quot; ps -ef|grep ${name[i]} |grep -v grep if [ $? -eq 0 ]; then pid=$(pgrep -f ${name[i]}) echo &quot;`date +&quot;%Y-%m-%d %H:%M:%S&quot;` ${name[$i]} is running with pid $pid&quot; &gt;&gt; ${log} else $(${exs_init[i]}) echo &quot;`date +&quot;%Y-%m-%d %H:%M:%S&quot;` ${name[$i]} start success&quot; &gt;&gt; ${log} fidone 解释：检测 nginx、mysql进程是否存在，如果不存在了会自动重新启动。脚本每次运行会写日志的，没事可以去看看该日志文件，如果进程是不是真的经常性不存在，恐怕就要排查一下深层原因了。 源码：check_nginx.sh 编辑 /etc/crontab 文件crontab -e 在文件最后添加一行： */5 * * * * /xxx/check_nginx.sh &gt; /dev/null 2&gt;&amp;1 上表示每 5 分钟，执行一下脚本 /xxx/check_nginx.sh，其中xxx代表路径 /dev/null 2&gt;&amp;1 的意思是该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。 # For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * command to be executed 添加完配置，需要重启才能生效service crond restart","link":"/2020/05/21/Linux/10%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"},{"title":"【LeetCode-二分查找】有效的完全平方数","text":"【LeetCode-二分查找】有效的完全平方数题目来源于 LeetCode 上第 367 号（Valid Perfect Square）问题：有效的完全平方数。题目难度为 Easy。 英文地址：https://leetcode.com/problems/valid-perfect-square/ 中文地址：https://leetcode-cn.com/problems/valid-perfect-square/ 题目描述Given a positive integer num, write a function which returns True if num is a perfect square else False. Note: Do not use any built-in library function such as sqrt. Example 1: Input: 16Output: true Example 2: Input: 14Output: false 思路：二分查找什么是完全平方数？维基百科 数学上，平方数，或称完全平方数，是指可以写成某个整数的平方的数，即其平方根为整数的数。例如，9 = 3 × 3，它是一个平方数。 二分法的解题思路大致以下几个步骤： 寻找完全平方数 x 的区间范围：[low, height] 用二分法在区间 [low, height] 内寻找完全平方数 当 left &lt;= right 时：令 mind = (left + right) / 2，square = mind * mind 比较 square 与 x： 如果 square &gt; x，则 height = mind -1。 如果 square &lt; x，则 low = mind + 1。 如果 square == x，即完全平方数为 mind，返回 true。 如果在区间内没有找到，则返回 false。 如何确定 x 的区间范围：[low, height]？ 根据上面的概念 完全平方数 是某个整数的平方的数，也就是说 完全平方数 = n *n，例如，9 = 3 × 3 当 x &gt;= 2 时：它的整数平方根一定小于 x / 2 且大于 0，即 0 &lt; a &lt; x / 2 当 x =1 时：即 1 / 2 的值为0了，所以为了兼顾 1 的特殊情况，需要将边界设为 x / 2 +1 综合以上两种情况 x 的区间范围：[0, x / 2 + 1]，为了提高效率所以使用了位运算符，即 x/2 等价于 x &gt;&gt;&gt; 1 Java实现public class Solution { public boolean isPerfectSquare(int num) { long low = 0; long height = (num &gt;&gt;&gt; 1) + 1; while (low &lt;= height) { long mind = (low + height) &gt;&gt;&gt; 1; long square = mind * mind; if (square == num) { return true; } else if (square &lt; num) { low = mind + 1; } else { height = mind - 1; } } return false; }} Koltin实现class Solution { fun isPerfectSquare(num: Int): Boolean { var low = 0L var height = (num ushr 1).toLong() + 1 var target = num.toLong() while (low &lt;= height) { val mind: Long = (low + height) ushr 1 val square = mind * mind when { square == target -&gt; return true square &lt; target -&gt; low = mind + 1 else -&gt; height = mind - 1 } } return false }} 结语致力于分享一系列的Android系统源码、逆向分析、算法相关的文章，如果你同我一样喜欢算法、LeetCode，可以关注我，一起来学习，期待与你一起成长","link":"/2020/05/23/LeetCode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/2020-05-23/"}],"tags":[{"name":"Android1","slug":"Android1","link":"/tags/Android1/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Shell","slug":"Shell","link":"/tags/Shell/"},{"name":"LeetCode","slug":"LeetCode","link":"/tags/LeetCode/"},{"name":"二分查找","slug":"二分查找","link":"/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}],"categories":[{"name":"Hexo1","slug":"Hexo1","link":"/categories/Hexo1/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"}]}